{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactSwipeable = require('react-swipeable');\n\nvar _reactSwipeable2 = _interopRequireDefault(_reactSwipeable);\n\nvar ImageGallery = _react2['default'].createClass({\n  displayName: 'ImageGallery',\n  propTypes: {\n    items: _react2['default'].PropTypes.array.isRequired,\n    gallerymenu: _react2['default'].PropTypes.array,\n    showThumbnails: _react2['default'].PropTypes.bool,\n    showBullets: _react2['default'].PropTypes.bool,\n    showFileMeta: _react2['default'].PropTypes.bool,\n    showCloseButton: _react2['default'].PropTypes.bool,\n    showNav: _react2['default'].PropTypes.bool,\n    showIndex: _react2['default'].PropTypes.bool,\n    indexSeparator: _react2['default'].PropTypes.string,\n    autoPlay: _react2['default'].PropTypes.bool,\n    lazyLoad: _react2['default'].PropTypes.bool,\n    slideInterval: _react2['default'].PropTypes.number,\n    onSlide: _react2['default'].PropTypes.func,\n    onClick: _react2['default'].PropTypes.func,\n    startIndex: _react2['default'].PropTypes.number,\n    defaultImage: _react2['default'].PropTypes.string,\n    disableThumbnailScroll: _react2['default'].PropTypes.bool,\n    slideOnThumbnailHover: _react2['default'].PropTypes.bool,\n    server: _react2['default'].PropTypes.bool,\n    onCloseClick: _react2['default'].PropTypes.func,\n    useKeyboardNavigation: _react2['default'].PropTypes.bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      lazyLoad: true,\n      showThumbnails: true,\n      showNav: true,\n      showCloseButton: false,\n      showBullets: false,\n      showFileMeta: false,\n      showIndex: false,\n      indexSeparator: ' / ',\n      autoPlay: false,\n      disableThumbnailScroll: false,\n      server: false,\n      slideOnThumbnailHover: false,\n      slideInterval: 4000,\n      startIndex: 0,\n      useKeyboardNavigation: true\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      currentIndex: this.props.startIndex,\n      thumbnailsTranslateX: 0,\n      containerWidth: 0\n    };\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n    if (prevState.containerWidth !== this.state.containerWidth || prevProps.showThumbnails !== this.props.showThumbnails) {\n      // adjust thumbnail container when window width is adjusted\n      // when the container resizes, thumbnailsTranslateX\n      // should always be negative (moving right),\n      // if container fits all thumbnails its set to 0\n      this._setThumbnailsTranslateX(-this._getScrollX(this.state.currentIndex > 0 ? 1 : 0) * this.state.currentIndex);\n    }\n\n    if (prevState.currentIndex !== this.state.currentIndex) {\n      // call back function if provided\n      if (this.props.onSlide) {\n        this.props.onSlide(this.state.currentIndex);\n      } // calculates thumbnail container position\n\n\n      if (this.state.currentIndex === 0) {\n        this._setThumbnailsTranslateX(0);\n      } else {\n        var indexDifference = Math.abs(prevState.currentIndex - this.state.currentIndex);\n\n        var _scrollX = this._getScrollX(indexDifference);\n\n        if (_scrollX > 0) {\n          if (prevState.currentIndex < this.state.currentIndex) {\n            this._setThumbnailsTranslateX(this.state.thumbnailsTranslateX - _scrollX);\n          } else if (prevState.currentIndex > this.state.currentIndex) {\n            this._setThumbnailsTranslateX(this.state.thumbnailsTranslateX + _scrollX);\n          }\n        }\n      }\n    }\n  },\n  componentWillMount: function componentWillMount() {\n    this._thumbnailDelay = 300;\n    this._ghotClickDelay = 600;\n    this._preventGhostClick = false;\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._handleResize();\n\n    if (this.props.autoPlay) {\n      this.play();\n    }\n\n    window.addEventListener('resize', this._handleResize);\n    var fn = window.onkeydown;\n\n    window.onkeydown = function (e) {\n      // handle event\n      _this._handleKeyDown(e);\n    };\n\n    this.origFn = fn;\n    this.refs.gallerycontent.focus();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    window.removeEventListener('resize', this._handleResize);\n\n    if (this._intervalId) {\n      window.clearInterval(this._intervalId);\n      this._intervalId = null;\n    }\n\n    window.onkeydown = this.origFn;\n  },\n  slideToIndex: function slideToIndex(index, event) {\n    var slideCount = this.props.items.length - 1;\n\n    if (index < 0) {\n      this.setState({\n        currentIndex: slideCount\n      });\n    } else if (index > slideCount) {\n      this.setState({\n        currentIndex: 0\n      });\n    } else {\n      this.setState({\n        currentIndex: index\n      });\n    }\n\n    if (event) {\n      if (this._intervalId) {\n        // user event, reset interval\n        this.pause();\n        this.play();\n      }\n    }\n  },\n  play: function play() {\n    var _this2 = this;\n\n    if (this._intervalId) {\n      return;\n    }\n\n    this._intervalId = window.setInterval(function () {\n      if (!_this2.state.hovering) {\n        _this2.slideToIndex(_this2.state.currentIndex + 1);\n      }\n    }, this.props.slideInterval);\n  },\n  pause: function pause() {\n    if (this._intervalId) {\n      window.clearInterval(this._intervalId);\n      this._intervalId = null;\n    }\n  },\n  _wrapClick: function _wrapClick(func) {\n    var _this3 = this;\n\n    if (typeof func === 'function') {\n      return function (event) {\n        if (_this3._preventGhostClick === true) {\n          return;\n        }\n\n        func(event);\n      };\n    }\n  },\n  _touchEnd: function _touchEnd() {\n    var _this4 = this;\n\n    this._preventGhostClick = true;\n    this._preventGhostClickTimer = window.setTimeout(function () {\n      _this4._preventGhostClick = false;\n      _this4._preventGhostClickTimer = null;\n    }, this._ghotClickDelay);\n  },\n  _setThumbnailsTranslateX: function _setThumbnailsTranslateX(x) {\n    this.setState({\n      thumbnailsTranslateX: x\n    });\n  },\n  _handleResize: function _handleResize() {\n    this.setState({\n      containerWidth: this._imageGallery.offsetWidth\n    });\n  },\n  _getScrollX: function _getScrollX(indexDifference) {\n    if (this.props.disableThumbnailScroll) {\n      return 0;\n    }\n\n    if (this._thumbnails) {\n      if (this._thumbnails.scrollWidth <= this.state.containerWidth) {\n        return 0;\n      }\n\n      var totalThumbnails = this._thumbnails.children.length; // total scroll-x required to see the last thumbnail\n\n      var totalScrollX = this._thumbnails.scrollWidth - this.state.containerWidth; // scroll-x required per index change\n\n      var perIndexScrollX = totalScrollX / (totalThumbnails - 1);\n      return indexDifference * perIndexScrollX;\n    }\n  },\n  _handleMouseOverThumbnails: function _handleMouseOverThumbnails(index) {\n    var _this5 = this;\n\n    if (this.props.slideOnThumbnailHover) {\n      this.setState({\n        hovering: true\n      });\n\n      if (this._thumbnailTimer) {\n        window.clearTimeout(this._thumbnailTimer);\n        this._thumbnailTimer = null;\n      }\n\n      this._thumbnailTimer = window.setTimeout(function () {\n        _this5.slideToIndex(index);\n\n        _this5.pause();\n      }, this._thumbnailDelay);\n    }\n  },\n  _handleMouseLeaveThumbnails: function _handleMouseLeaveThumbnails() {\n    if (this._thumbnailTimer) {\n      window.clearTimeout(this._thumbnailTimer);\n      this._thumbnailTimer = null;\n\n      if (this.props.autoPlay == true) {\n        this.play();\n      }\n    }\n\n    this.setState({\n      hovering: false\n    });\n  },\n  _handleKeyDown: function _handleKeyDown(e) {\n    if (this.props.useKeyboardNavigation) {\n      var currentIndex = this.state.currentIndex;\n\n      switch (e.which) {\n        case 39:\n          {\n            // Right arrow\n            this.slideToIndex(currentIndex + 1, e);\n            break;\n          }\n\n        case 37:\n          {\n            // Left arrow\n            this.slideToIndex(currentIndex - 1, e);\n            break;\n          }\n\n        case 27:\n          {\n            // Esc\n            if (typeof this.props.onCloseClick === 'function') {\n              this.props.onCloseClick(e);\n            }\n\n            break;\n          }\n\n        default:\n          return;\n      }\n    }\n  },\n  _handleMouseOver: function _handleMouseOver() {\n    this.setState({\n      hovering: true\n    });\n  },\n  _handleMouseLeave: function _handleMouseLeave() {\n    this.setState({\n      hovering: false\n    });\n  },\n  _getAlignmentClassName: function _getAlignmentClassName(index) {\n    var currentIndex = this.state.currentIndex;\n    var alignment = '';\n\n    switch (index) {\n      case currentIndex - 1:\n        alignment = ' left';\n        break;\n\n      case currentIndex:\n        alignment = ' center';\n        break;\n\n      case currentIndex + 1:\n        alignment = ' right';\n        break;\n    }\n\n    if (this.props.items.length >= 3) {\n      if (index === 0 && currentIndex === this.props.items.length - 1) {\n        // set first slide as right slide if were sliding right from last slide\n        alignment = ' right';\n      } else if (index === this.props.items.length - 1 && currentIndex === 0) {\n        // set last slide as left slide if were sliding left from first slide\n        alignment = ' left';\n      }\n    }\n\n    return alignment;\n  },\n  _getFileMeta: function _getFileMeta(currentIndex) {\n    var filemeta = [];\n    var item = undefined;\n\n    for (var i = 0; i < this.props.items.length; i++) {\n      if (i === currentIndex) {\n        item = this.props.items[i];\n      }\n    }\n\n    if (!item) return null;\n    if (!this.props.showFileMeta) return null;\n\n    if (item.filemeta) {\n      var x = 0;\n\n      for (var prop in item.filemeta) {\n        if (prop !== 'rotation') {\n          filemeta.push(_react2['default'].createElement('div', {\n            key: x,\n            className: prop + '-css image-filemeta-row-' + x\n          }, item.filemeta[prop]));\n        }\n\n        x++;\n      }\n    }\n\n    return _react2['default'].createElement('div', {\n      className: 'filemetaContainer'\n    }, filemeta);\n  },\n  _handleImageLoad: function _handleImageLoad(event) {\n    // slide images have an opacity of 0, onLoad the class 'loaded' is added\n    // so that it transitions smoothly when navigating to non adjacent slides\n    if (event.target.className.indexOf('loaded') === -1) {\n      event.target.className += ' loaded';\n    }\n  },\n  _handleImageError: function _handleImageError(event) {\n    if (this.props.defaultImage && event.target.src.indexOf(this.props.defaultImage) === -1) {\n      event.target.src = this.props.defaultImage;\n    }\n  },\n  render: function render() {\n    var _this6 = this;\n\n    var currentIndex = this.state.currentIndex;\n    var thumbnailStyle = {\n      MozTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',\n      WebkitTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',\n      OTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',\n      msTransform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)',\n      transform: 'translate3d(' + this.state.thumbnailsTranslateX + 'px, 0, 0)'\n    };\n    var slides = [];\n    var thumbnails = [];\n    var bullets = [];\n    var actionBar = undefined;\n    var gallerymenu = this.props.gallerymenu || [];\n    var gallerymenudom = undefined;\n    var gallerymenuitems = [];\n    this.props.items.map(function (item, index) {\n      var rotation = _this6.props.propImages[index].filemeta.rotation || 0;\n      var rotationClass = {\n        transform: 'rotate(' + rotation + 'deg)'\n      };\n\n      var alignment = _this6._getAlignmentClassName(index);\n\n      var originalClass = item.originalClass ? ' ' + item.originalClass : '';\n      var thumbnailClass = item.thumbnailClass ? ' ' + item.thumbnailClass : '';\n\n      var slide = _react2['default'].createElement('div', {\n        key: index,\n        style: rotationClass,\n        className: 'image-gallery-slide' + alignment + originalClass,\n        onClick: _this6._wrapClick(_this6.props.onClick),\n        onTouchStart: _this6.props.onClick,\n        onTouchEnd: _this6._touchEnd\n      }, _react2['default'].createElement('img', {\n        className: _this6.props.server ? 'loaded' : null,\n        src: item.original,\n        alt: item.originalAlt,\n        onLoad: _this6._handleImageLoad,\n        onError: _this6._handleImageError\n      }), item.description);\n\n      if (_this6.props.lazyLoad) {\n        if (alignment) {\n          slides.push(slide);\n        }\n      } else {\n        slides.push(slide);\n      }\n\n      if (_this6.props.showThumbnails) {\n        thumbnails.push(_react2['default'].createElement('a', {\n          onMouseOver: _this6._handleMouseOverThumbnails.bind(_this6, index),\n          onMouseLeave: _this6._handleMouseLeaveThumbnails.bind(_this6, index),\n          key: index,\n          className: 'image-gallery-thumbnail' + (currentIndex === index ? ' active' : '') + thumbnailClass,\n          onTouchStart: _this6.slideToIndex.bind(_this6, index),\n          onTouchEnd: _this6._touchEnd,\n          onClick: _this6._wrapClick(_this6.slideToIndex.bind(_this6, index))\n        }, _react2['default'].createElement('img', {\n          style: rotationClass,\n          src: item.thumbnail,\n          alt: item.thumbnailAlt,\n          onError: _this6._handleImageError\n        })));\n      }\n\n      if (_this6.props.showBullets) {\n        bullets.push(_react2['default'].createElement('li', {\n          key: index,\n          className: 'image-gallery-bullet ' + (currentIndex === index ? 'active' : ''),\n          onTouchStart: _this6.slideToIndex.bind(_this6, index),\n          onTouchEnd: _this6._touchEnd,\n          onClick: _this6._wrapClick(_this6.slideToIndex.bind(_this6, index))\n        }));\n      }\n    });\n\n    if (this.props.showCloseButton && typeof this.props.onCloseClick === 'function') {\n      actionBar = _react2['default'].createElement('div', {\n        className: 'image-gallery-actionbar'\n      }, _react2['default'].createElement('div', {\n        onClick: this.props.onCloseClick,\n        className: 'image-gallery-closeButton'\n      }));\n    }\n\n    if (gallerymenu) {\n      gallerymenu.map(function (item, index) {\n        gallerymenuitems.push(_react2['default'].createElement('li', {\n          key: index,\n          className: 'gallerymenu-item-css'\n        }, _react2['default'].createElement('a', {\n          key: index,\n          onClick: _this6._wrapClick(item.callback.bind(_this6, currentIndex))\n        }, item.text)));\n      });\n    }\n\n    var swipePrev = this.slideToIndex.bind(this, currentIndex - 1);\n    var swipeNext = this.slideToIndex.bind(this, currentIndex + 1);\n    var itemsTotal = this.props.items.length;\n    return _react2['default'].createElement('section', {\n      ref: function ref(i) {\n        return _this6._imageGallery = i;\n      },\n      className: 'image-gallery'\n    }, actionBar, _react2['default'].createElement('div', {\n      tabIndex: '1',\n      onMouseOver: this._handleMouseOver,\n      onMouseLeave: this._handleMouseLeave,\n      ref: 'gallerycontent',\n      className: 'image-gallery-content'\n    }, itemsTotal >= 2 ? [this.props.showNav && [_react2['default'].createElement('a', {\n      key: 'leftNav',\n      className: 'image-gallery-left-nav',\n      onTouchStart: swipePrev,\n      onTouchEnd: this._touchEnd,\n      onClick: this._wrapClick(swipePrev)\n    }), _react2['default'].createElement('a', {\n      key: 'rightNav',\n      className: 'image-gallery-right-nav',\n      onTouchStart: swipeNext,\n      onTouchEnd: this._touchEnd,\n      onClick: this._wrapClick(swipeNext)\n    })], _react2['default'].createElement(_reactSwipeable2['default'], {\n      key: 'swipeable',\n      onSwipedLeft: swipeNext,\n      onSwipedRight: swipePrev\n    }, _react2['default'].createElement('div', {\n      className: 'image-gallery-slides'\n    }, slides))] : _react2['default'].createElement('div', {\n      className: 'image-gallery-slides'\n    }, slides), this._getFileMeta(currentIndex), gallerymenu && _react2['default'].createElement('div', {\n      className: 'image-gallery-menu'\n    }, _react2['default'].createElement('ul', {\n      className: 'image-gallery-menu-container'\n    }, gallerymenuitems)), this.props.showBullets && _react2['default'].createElement('div', {\n      className: 'image-gallery-bullets'\n    }, _react2['default'].createElement('ul', {\n      className: 'image-gallery-bullets-container'\n    }, bullets)), this.props.showIndex && _react2['default'].createElement('div', {\n      className: 'image-gallery-index'\n    }, _react2['default'].createElement('span', {\n      className: 'image-gallery-index-current'\n    }, this.state.currentIndex + 1), _react2['default'].createElement('span', {\n      className: 'image-gallery-index-separator'\n    }, this.props.indexSeparator), _react2['default'].createElement('span', {\n      className: 'image-gallery-index-total'\n    }, itemsTotal))), this.props.showThumbnails && _react2['default'].createElement('div', {\n      className: 'image-gallery-thumbnails'\n    }, _react2['default'].createElement('div', {\n      ref: function ref(t) {\n        return _this6._thumbnails = t;\n      },\n      className: 'image-gallery-thumbnails-container',\n      style: thumbnailStyle\n    }, thumbnails)));\n  }\n});\n\nexports['default'] = ImageGallery;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}